{"version":3,"sources":["TopBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["searchKeyInDevices","devices","key","index","length","useStyles","makeStyles","theme","select","top","paddingLeft","paddingRight","topColor","color","iFrame","border","TopBar","useState","device","setDevice","setDevices","selectedDevice","setSelectedDevice","url","setUrl","classes","AppBar","style","backgroundColor","position","Toolbar","Grid","container","justify","Typography","variant","className","join","alignItems","Select","label","value","onChange","event","target","d","MenuItem","console","log","map","deviceType","name","TextField","height","disabled","width","paddingTop","fullWidth","String","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f10ec66.chunk.js","sourcesContent":["import {\n  AppBar,\n  Grid,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Iframe from \"react-iframe\";\nimport { default as d } from \"./devices.json\";\n\ninterface DeviceType {\n  key: string;\n  name: string;\n  height: number;\n  width: number;\n}\n\nconst searchKeyInDevices = (devices, key) => {\n  for (let index = 0; index < devices.length; index++) {\n    if (devices[index].key === key) {\n      return devices[index];\n    }\n  }\n};\n\nconst useStyles = makeStyles((theme) => ({\n  select: {},\n  top: {\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  topColor: {\n    color: \"black\",\n  },\n  iFrame: {\n    border: \"2px solid black\",\n  },\n}));\n\nexport function TopBar() {\n  const [device, setDevice] = useState<string>(\"\");\n  const [devices, setDevices] = useState<DeviceType[]>();\n  const [selectedDevice, setSelectedDevice] = useState<DeviceType>();\n  const [url, setUrl] = useState<string>(\"\");\n  const classes = useStyles();\n  const handleChange = (event) => {\n    setDevice(event.target.value);\n    setDevices(d.devices[event.target.value]);\n  };\n\n  const handleChangeDevice = (event) => {\n    console.log(searchKeyInDevices(devices, event.target.value));\n    setSelectedDevice(searchKeyInDevices(devices, event.target.value));\n  };\n  return (\n    <div>\n      <AppBar style={{ backgroundColor: \"white\" }} position=\"relative\">\n        <Toolbar>\n          <Grid container justify=\"center\">\n            <Typography\n              variant=\"h6\"\n              className={[classes.top, classes.topColor].join(\" \")}\n            >\n              Responsive Checker\n            </Typography>\n          </Grid>\n        </Toolbar>\n        <Toolbar>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Select\n              label=\"Device\"\n              value={device}\n              onChange={handleChange}\n              variant=\"outlined\"\n              color=\"primary\"\n              className={[classes.top, classes.topColor, classes.select].join(\n                \" \"\n              )}\n            >\n              <MenuItem value=\"mobilePhone\">Mobile Phone</MenuItem>\n            </Select>\n            <Select\n              label=\"Device Type\"\n              value={selectedDevice?.key}\n              onChange={handleChangeDevice}\n              variant=\"outlined\"\n              color=\"primary\"\n              className={[classes.top, classes.topColor].join(\" \")}\n            >\n              {devices?.map((deviceType: DeviceType) => (\n                <MenuItem value={deviceType.key}>{deviceType.name}</MenuItem>\n              ))}\n            </Select>\n            {console.log(selectedDevice)}\n            <Typography\n              variant=\"body2\"\n              className={[classes.top, classes.topColor].join(\" \")}\n            >\n              {\" \"}\n              Height:{\" \"}\n            </Typography>\n            <TextField\n              color=\"primary\"\n              value={selectedDevice?.height}\n              disabled\n              variant=\"outlined\"\n              className={classes.topColor}\n            ></TextField>\n            <Typography\n              variant=\"body2\"\n              className={[classes.top, classes.topColor].join(\" \")}\n            >\n              {\" \"}\n              Width:{\" \"}\n            </Typography>\n            <TextField\n              color=\"primary\"\n              value={selectedDevice?.width}\n              disabled\n              variant=\"outlined\"\n              className={classes.topColor}\n            ></TextField>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <div style={{ paddingTop: 10 }}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <TextField\n            color=\"primary\"\n            value={url}\n            onChange={(event) => setUrl(event.target.value)}\n            variant=\"outlined\"\n            fullWidth\n          ></TextField>\n        </Grid>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          {selectedDevice && url !== \"\" && (\n            <Iframe\n              url={url}\n              height={String(selectedDevice?.height)}\n              width={String(selectedDevice?.width)}\n              className={classes.iFrame}\n            ></Iframe>\n          )}\n        </Grid>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { TopBar } from \"./TopBar\";\n\nfunction App() {\n  return (\n    <div>\n      <TopBar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}